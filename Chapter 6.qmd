---
title: "Chapter 6"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# Chapter 6 Maps

Imports

```{r}
#| echo: false
library(tidyverse)
library(gridExtra) # multiplots
library(ggtext)
library(tidyverse)
```

## 6.1 Polygon maps
`geom_polygon()` is the the most straight forward approach to draw boundaries
```{r}
mi_counties <- map_data("county", "michigan") |> 
  dplyr::select(lon=long,lat,group,id=subregion)
head(mi_counties)
```
`lat` and `long` specify the latitude and longitude of a vertex, `id` the name of the region, and `group` for contiguous areas within a region. 
```{r}
# Example of geom_point(), kinda works but not ideal
ggplot(mi_counties, aes(lon, lat)) + 
  geom_point(size = .25, show.legend = FALSE) +
  coord_quickmap()

ggplot(mi_counties, aes(lon, lat, group = group)) +
  geom_polygon(fill = "white", colour = "grey50") + 
  coord_quickmap()
```
## 6.2 Simple features maps 
Typically "longitude-latitude" data is not used in real-world mapping. Instead vector data for maps is encoded using the "simple features" standard. The `sf` package in R gives two main function, `geom_sf()` and `coord_sf()`, which can be used within ggplot. 

The `ozmaps` package, which provides maps for Australian state boundaries, local government areas, electoral boundaries, and so on will be used. 
```{r}
library(ozmaps)
library(sf)

oz_states <- ozmaps::ozmap_states
oz_states
```
The most important column is `geometry`, which specifies the spatial geometry for each of the states and territories. Each element in the `geometry` column is a multipolygon object which contains data specifying the verticies of one or more polygons that demark the border of a region. Given data with this format, `geom_sf()` and `coord_sf()` will know how to draw a map without specifying any parameters or declaring aesthetics.
```{r}
ggplot(oz_states) +
  geom_sf() + # Creates the shape geometry by finding the data in the sf object
  coord_sf() # Creates the map projection
```
### 6.2.1 Layered maps
Technically we are overlaying one map over the other here. 
```{r}
chile_country_boundary <- read_sf("C:/Users/xc_ma/Documents/Coding/R/Repo/ggplot2_book/boundary.shp")
chile_built_areas <- read_sf("C:/Users/xc_ma/Documents/Coding/R/Repo/ggplot2_book/columbia_iscgm_chile_2008_builtupa.shp") # Can't get this one to visualize right. It's supposed to include "all details" of chile
chile_airports <- read_sf("C:/Users/xc_ma/Documents/Coding/R/Repo/ggplot2_book/columbia_iscgm_chile_2008_aerofacp.shp")

ggplot(chile_country_boundary)+
  geom_sf(col='black',fill='white')+
  geom_sf(data=chile_airports,col='green') +
  coord_sf()
```
### 6.2.2 Labelled maps
Labeling a map is supported by `geom_sf_label()` and `geom_sf_text()`
```{r}
# Filter electorates in the Sydney metropolitan region
sydney_map <- ozmaps::abs_ced %>% filter(NAME %in% c(
  "Sydney", "Wentworth", "Warringah", "Kingsford Smith", "Grayndler", "Lowe", 
  "North Sydney", "Barton", "Bradfield", "Banks", "Blaxland", "Reid", 
  "Watson", "Fowler", "Werriwa", "Prospect", "Parramatta", "Bennelong", 
  "Mackellar", "Greenway", "Mitchell", "Chifley", "McMahon"
))

# Draw the electoral map of Sydney
ggplot(sydney_map) + 
  geom_sf(aes(fill = NAME), show.legend = FALSE) + 
  coord_sf(xlim = c(150.97, 151.3), ylim = c(-33.98, -33.79)) + 
  geom_sf_label(aes(label = NAME), label.padding = unit(1, "mm"))
#> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not
#> give correct results for longitude/latitude data
```
### 6.2.3 Adding other geoms
```{r}
oz_capitals <- tibble::tribble( 
  ~city,           ~lat,     ~lon,
  "Sydney",    -33.8688, 151.2093,  
  "Melbourne", -37.8136, 144.9631, 
  "Brisbane",  -27.4698, 153.0251, 
  "Adelaide",  -34.9285, 138.6007, 
  "Perth",     -31.9505, 115.8605, 
  "Hobart",    -42.8821, 147.3272, 
  "Canberra",  -35.2809, 149.1300, 
  "Darwin",    -12.4634, 130.8456, 
)

ggplot() + 
  geom_sf(data = oz_states, colour = "black", fill = NA) + 
  geom_point(data = oz_capitals, mapping = aes(x = lon, y = lat), colour = "red") + 
  coord_sf()
```
## 6.3 Map projections
There's different coordinate systems that might change the parameters of the map projection being examined. 
```{r}
st_crs(oz_states) # EPSG code 4283
```
`coord_sf()` controls the *coordinate reference system*, which ensures every subsequent layer in the plot uses the same projection.
```{r}
ggplot(oz_states)+geom_sf()
ggplot(oz_states)+geom_sf() + coord_sf(crs=st_crs(3112))
```
## 6.4 Working with sf data
You can manipulate the simple features data. 
```{r}
# Grab a subset
edenmonaro <- ozmaps::abs_ced %>% filter(NAME == "Eden-Monaro")

p <- ggplot(edenmonaro) + geom_sf()
p + coord_sf(xlim = c(147.75, 150.25), ylim = c(-37.5, -34.5)) 
p + coord_sf(xlim = c(150, 150.25), ylim = c(-36.3, -36)) 
```

This plot has two distinct polygons since the island requires it's own. Creating an `MULTIPOLYGON` geometry.
```{r}
# grab the geometry object
edenmonaro <- edenmonaro |> pull(geometry)
# Helper function examples
st_geometry_type(edenmonaro) # Geometry type
st_dimension(edenmonaro) # Number of dimensions (2D is XY and 3D is XYZ)
st_bbox(edenmonaro) # Bounding box
st_crs(edenmonaro) # Coordinate reference system
```

Right now `edenmonaro` is defined by the `MULTIPOLYGON` geometry with one feature. This can be "cast" into two distinct `POLYGON` geometries using `st_cast()`. 
```{r}
st_cast(edenmonaro,'POLYGON')
```

This is useful when there is a large number of polygons. For example the Dawson electorate which contains 69 islands shown below as a single `MULTIPOLYGON`. 
```{r}
dawson <- ozmaps::abs_ced %>% 
  filter(NAME == "Dawson") %>% 
  pull(geometry)
dawson
#> Geometry set for 1 feature 
#> Geometry type: MULTIPOLYGON
#> MULTIPOLYGON (((148 -19.9, 148 -19.8, 148 -19.8...

ggplot(dawson) + 
  geom_sf() +
  coord_sf()
```
Now if the desired plot is to map only the islands...
```{r}
dawson <- st_cast(dawson,'POLYGON')
which.max(st_area(dawson)) # The largest polygon
ggplot(dawson[-which.max(st_area(dawson))]) +  # Remove largest polygon  
  geom_sf() + 
  coord_sf()
```
## 6.5 Raster maps
*raster data* is another type of spatial data source but instead of using geometrical foundations it's instead a form of images. 
```{r}
library(stars)
#> Loading required package: abind
# https://github.com/hadley/ggplot2-book/blob/main/IDE00422.202001072100.tif
sat_vis <- read_stars(
  "IDE00422.202001072100.tif", 
  RasterIO = list(nBufXSize = 600, nBufYSize = 600)
)
```

```{r}
ggplot() + 
  geom_stars(data = sat_vis) + 
  coord_equal()
```
But the data for `sat_vis` contains three bands, and the plot shown is for the first band only. So using ggplot...
```{r}
ggplot()+
  geom_stars(data=sat_vis,show.legend=FALSE) +
  facet_wrap(~band)+
  coord_equal() +
  scale_fill_gradient(low='black',high='white')
```
Using image data is restrictive because it creates limitations such as the trying to point out where the relevant landmasses are. For example an overlay of the Australia map that has been referenced previously in this chapter. There's also the coordinate reference system adjustment for the projections that must occur too. Luckily there's ggplot and company. 
```{r}
oz_states <- st_transform(oz_states, crs = st_crs(sat_vis)) # Uses sat_vis CRS

ggplot() + 
  geom_stars(data = sat_vis, show.legend = FALSE) +
  geom_sf(data = oz_states, fill = NA, color = "white") + 
  coord_sf() + 
  theme_void() + 
  scale_fill_gradient(low = "black", high = "white")
```


