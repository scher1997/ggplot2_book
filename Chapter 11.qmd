---
title: "Chapter 11"
format: html
editor: visual
---

# Color scales and legends

Imports

```{r}
#| echo: false
library(tidyverse)
library(patchwork)
```

## 11.1 A little color theory

This is geared towards the perception of sensory input to the eyes, which can be complex and is explained well http://tinyurl.com/clrdtls. There's the usual RGB encoding of color space, which defines a color by the intesities of red, green, and blue light needed to produce it. However a modern approach is used that uses HCL color space of *h*ue, *c*hroma, and *l*uminance. - *Hue* ranges from 0 to 360 (an angle) and gives the 'color' of the color. - *Chroma* is the 'purity' of the color, ranging from 0 (grey) to a maximum that varies with luminance - *Luminance* is the lightness of the color, ranging from 0 (black) to 1 (white).

### 11.1.1 Color blindness

A sizeable minority of people do not posess the usual complemnt of color receptions and so can distinguish fewer colros than others. A simple heuristic is to avoid red-green contrasts, and there's ways to check that visuals are easy to read for color-blind individuals (https://www.vischeck.com/). The `displayAllColors()` function from the *colorBlindness* package.

```{r}
#| warning: false
colorBlindness::displayAllColors(rainbow(6))
```

The quick and easy `viridis()` colorscale are discriminable under the most common forms of color blindness and greyscale.

```{r}
#| warning: false
colorBlindness::displayAllColors(viridis::viridis(6))
```

## 11.2 Continuous color scales

Example plot for the section. Note that the fill aesthetic is used by the color aesthetic has the same ideas applied.

```{r}
erupt <- ggplot(faithfuld, aes(waiting,eruptions, fill=density)) +
  geom_raster() +
  scale_x_continuous(NULL,expand=c(0,0)) +
  scale_y_continuous(NULL,expand=c(0,0)) +
  theme(legend.position = 'none')

```

### 11.2.1 Particular palettes

**ggplot2** has some "hand picked" palettes available. Such as `scale_fill_viridis_c()` (c for continuous)

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3
erupt
erupt + scale_fill_viridis_c()
erupt + scale_fill_viridis_c(option = 'magma')
```

Or `scale_fill_distiller()`

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3
erupt + scale_fill_distiller()
erupt + scale_fill_distiller(palette = 'RdPu')
erupt + scale_fill_distiller(palette = 'YlOrBr')
```

Or *scico* package for other palettes that are perpectually uniform and suitable for scientific visualization

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3
erupt + scico::scale_fill_scico(palette = 'bilbao') # default
erupt + scico::scale_fill_scico(palette = 'vik')
erupt + scico::scale_fill_scico(palette = 'lajolla')
```

And lastly my recommended palette package *paletteer* which combines everything shown.

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3

erupt + paletteer::scale_fill_paletteer_c('viridis::plasma')
erupt + paletteer::scale_fill_paletteer_c('scico::tokyo')
```

### 11.2.2 Robust recipes

These return the same plot.

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3

erupt 
erupt + scale_fill_continuous()
erupt + scale_fill_gradient()
```

Gradient scales provide a robust method for creating any color scheme you like. You just specify two or more reference colors and *ggplot2* will interpolate linearly between them. - `scale_fill_gradient()` produces a two-color gradient - `scale_fill_gradient2()` produces a three-color gradient with specified midpoint - `scale_fill_gradientn()` produces an n-color gradient.

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3

erupt + scale_fill_gradient(low='grey',high='brown')
erupt +
  scale_fill_gradient2(
    low = 'grey',
    mid = 'white',
    high = 'brown',
    midpoint = 0.02 # Value at which to set midpoint to (default=0)
  )
erupt + scale_fill_gradientn(colors = terrain.colors(7))
```

Gradient color palettes require a bit more thought. Generally, for a two-point gradient scale you want to convey the perceptual impression that the values are sequentially ordered, so you want to keep hue constant, and vary chroma and luminance. The Munsell color system is useful for this as it proivides an easy way of specifying colros based on their hue, chroma, and luminance. Accessed through the *munsell* package (https://github.com/cwickham/munsell/).

```{r}
#| layout-ncol: 2
#| fig-width: 3
#| fig-height: 3
#| warning: false

# Generate plot with hue_slice to see colors (annotating the column we choose)
munsell::hue_slice('5P') +
  annotate(
    geom = 'segment',
    x = c(7,7),
    y = c(1,10),
    xend = c(7,7),
    yend = c(2,9),
    arrow = arrow(length = unit(2,'mm')) 
  )

# Build figure
erupt + scale_fill_gradient(
  low = munsell::mnsl('5P 2/12'),
  high = munsell::mnsl('5P 7/12')
)

```

n-point gradient is good if you want to try to map the colors to the context of the figure. So if green/blue/whatever color is supposed to mean something to the audience then you can easily pick a color range that's best for it.

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3
#| warning: false

# munsell example
erupt + scale_fill_gradient2(
  low = munsell::mnsl("5B 7/8"),
  high = munsell::mnsl("5Y 7/8"),
  mid = munsell::mnsl("N 7/0"),
  midpoint = .02
) 

# colorspace examples
erupt + scale_fill_gradientn(colours = colorspace::heat_hcl(7))
erupt + scale_fill_gradientn(colours = colorspace::diverge_hcl(7))
```

### 11.2.3 Missing values

All continuous color scales have an `na.value` parameter that controls what color is used for missing values (including values outside of the range of scale limits). Setting `na.value=NA` makes missing values invisible.

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3
#| warning: false
#| 
df <- tibble(x= 1,y=1:5,z=c(1,3,2,NA,5))
base <- ggplot(df,aes(x,y))+
  geom_tile(aes(fill=z),linewidth = 5) +
  labs(x=NULL,y=NULL) +
  scale_x_continuous(labels=NULL)

base
base + scale_fill_gradient(na.value = NA)
base + scale_fill_gradient(na.value = 'yellow')

```

### 11.2.4 Limits, breaks, and labels

```{r}
#| layout-ncol: 2
#| fig-width: 3
#| fig-height: 3

toy <- data.frame(
  const = 1, 
  up = 1:4,
  txt = letters[1:4], 
  big = (1:4)*1000,
  log = c(2, 5, 10, 2000)
)

base <- ggplot(toy, aes(up,up, fill = big)) +
  geom_tile() +
  labs(x=NULL,y=NULL)

base
base + scale_fill_continuous(limits = c(0,10000))
```

```{r}
#| layout-ncol: 2
#| fig-width: 3
#| fig-height: 3

base + scale_fill_continuous(breaks = c(1000,2000,4000)) # Can supress breaks entirely by setting them to NULL
base + scale_fill_continuous(labels = scales::label_dollar())
```

### 11.2.5 Legends

Default continuous color bar is a gradient.

```{r}
base <- ggplot(mpg,aes(cyl,displ,color=hwy))+
  geom_point(size=2)

base
```

The appearance is controlled using the `guide_colorbar()` function. The most important arguments are - `reverse` to flip the color bar to put the lowest values at the top - `barwidth` and `barheight` to specify the size of the bar, specified by grid units, e.g. `unit(1,'cm')` - `direction` specifies the direction of the guide, `"horizontal"` or `"vertical"`.

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3

# Combine with guides() function to set customized legends and axes
base + guides(color = guide_colorbar(reverse=TRUE))
base + guides(color = guide_colorbar(unit(2,'cm')))
base + guides(color = guide_colorbar(direction='horizontal'))
```

Or an alternative

```{r}
#| layout-ncol: 2
#| fig-width: 3
#| fig-height: 3

base + guides(color = guide_colorbar(reverse=TRUE))
base + scale_color_continuous(guide = guide_colorbar(reverse = TRUE))
```

## 11.3 Discrete color scales

Note that a discrete color scale will use `fill` aesthetic instead of the `color` aesthetic for continuous.

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3
#| 
df <- tibble(x = c('a','b','c','d'),y=c(3,4,1,2))
bars <-  ggplot(df, aes(x,y,fill=x)) +
  geom_bar(stat='identity') +
  labs(x = NULL, y = NULL) +
  theme(legend.position = 'none')
bars
bars + scale_fill_discrete() # Default 
bars + scale_fill_hue() # Same as default

```

### 11.3.1 Brewer scales

`scale_color_brewer()` is a discrete color scale that, along with the continuous analog `scale_color_distiller()` and binned analog `scale_color_fermenter()`, uses handpicked "ColorBrewer" colors from https://colorbrewer2.org/.

```{r}
#| fig-width: 7
#| fig-height: 10
RColorBrewer::display.brewer.all()
```

The first grouping are sequential scales and the second grouping is for not ordered categorical data.

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3
# bar plot
df <- data.frame(x = 1:3, y = 3:1, z = c("a", "b", "c"))
area <- ggplot(df, aes(x, y)) + 
  geom_bar(aes(fill = z), stat = "identity") + 
  theme(legend.position = "none") +
  labs(x = NULL, y = NULL)

# three palettes
area + scale_fill_brewer(palette = "Set1")
area + scale_fill_brewer(palette = "Set2")
area + scale_fill_brewer(palette = "Pastel1")
```

### 11.3.2 Hue and grey scales

The default color scheme picks evenly spaced hues around the HCL color scale. This works well for up to about eight colors, but after it becomes difficult to see the differences. The HCL parameters are modifiable though!

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3

bars
bars + scale_fill_hue(c=40)
bars + scale_fill_hue(h = c(180,300))
```

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3

bars + scale_fill_grey()
bars + scale_fill_grey(start = 0.5, end = 1)
bars + scale_fill_grey(start = 0, end = 0.5)
```

### 11.3.3 Paletteer scales

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3

bars + paletteer::scale_fill_paletteer_d("rtist::vangogh")
bars + paletteer::scale_fill_paletteer_d("colorBlindness::paletteMartin")
bars + paletteer::scale_fill_paletteer_d("wesanderson::FantasticFox1")
```

### 11.3.4 Manual scales

Can specify the color but also assign colors to each level in the order that you specify.

```{r}
#| layout-ncol: 4
#| fig-width: 3
#| fig-height: 3
bars + 
  scale_fill_manual(
    values = c("sienna1", "sienna4", "hotpink1", "hotpink4")
  )

bars + 
  scale_fill_manual(
    values = c("tomato1", "tomato2", "tomato3", "tomato4")
  )

bars + 
  scale_fill_manual(
    values = c("grey", "black", "grey", "grey")
  )

bars + 
  scale_fill_manual(
    values = c(
      "d" = "grey",
      "c" = "grey",
      "b" = "black",
      "a" = "grey"
    )
  )
```

### 11.3.5 Limits, breaks, and labels

Can either use the `limits` argument to the `scale` argument. Or by using the `lims()` helper function.

```{r}
#| layout-ncol: 2
#| fig-width: 3
#| fig-height: 3
#| 
mpg_99 <- mpg %>% filter(year == 1999)
mpg_08 <- mpg %>% filter(year == 2008)

base_99 <- ggplot(mpg_99, aes(displ, hwy, colour = fl)) + geom_point()  # Color is fuel type
base_08 <- ggplot(mpg_08, aes(displ, hwy, colour = fl)) + geom_point() 

base_99
base_08
```

Use this to get consistent mapping for each color aesthetic, it will manually set the limits.

```{r}
#| layout-ncol: 2
#| fig-width: 3
#| fig-height: 3
base_99 + lims(colour = c("c", "d", "e", "p", "r"))
base_08 + lims(colour = c("c", "d", "e", "p", "r"))
```

As shown in previous chapters `lims()` is for other aesthetics so they both can be modified in the same function call.

```{r}
#| layout-ncol: 2
#| fig-width: 3
#| fig-height: 3
base_99 + 
  lims(
    x = c(1, 7), 
    y = c(10, 45), 
    colour = c("c", "d", "e", "p", "r")
  )

base_08 + 
  lims(
    x = c(1, 7), 
    y = c(10, 45), 
    colour = c("c", "d", "e", "p", "r")
  )
```

There are potential limitations with these figures, the first being the scale limits for the 1999 data display labels for all five fuel types even though they're not in the data. This can be addressed by specifying the scale breaks. The second limitation is the labels are not particularly helpful which can be addressed by specifying them manually.

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3
base_99 + 
  scale_color_discrete(
    limits = c("c", "d", "e", "p", "r"), 
    breaks = c("d", "p", "r"),
    labels = c("diesel", "premium", "regular")
  )

## And with earlier changes
base_99 + 
  lims(x = c(1, 7), y = c(10, 45)) +
  scale_color_discrete(
    limits = c("c", "d", "e", "p", "r"), 
    breaks = c("d", "p", "r"),
    labels = c("diesel", "premium", "regular")
  )

base_08 + 
  lims(x = c(1, 7), y = c(10, 45)) +
  scale_color_discrete(
    limits = c("c", "d", "e", "p", "r"), 
    labels = c("compressed", "diesel", "ethanol", "premium", "regular")
  )
```

### 11.3.6 Legends

Legends can be customized using the `guide` argument or with the `guides()` helper function and the `guide_legend()` functiodn. - `nrow` or `ncol` specifies the dimension of the table. `byrow` controls how the table is filled with `FALSE` being by column and `TRUE` for by row.

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3
base <-  ggplot(mpg, aes(drv,fill = factor(cyl))) + geom_bar()

base
base + guides(fill = guide_legend(ncol=2))
base + guides(fill = guide_legend(ncol = 2, byrow=TRUE))
```

-   `reverse` reverses the order of the keys

```{r}
#| layout-ncol: 2
#| fig-width: 3
#| fig-height: 3

base 
base + guides(fill = guide_legend(reverse=TRUE))
```

-   `override.aes` is useful when you want the elements in the legend to display differently to the geoms in the plot. Useful when there is transparency or size to deal with overplotting with different colors.

```{r}
#| layout-ncol: 2
#| fig-width: 3
#| fig-height: 3

base <- ggplot(mpg, aes(displ,hwy,color=drv)) +
  geom_point(size = 4, alpha = 0.2, stroke = 0)

base + guides(color = guide_legend())
base + guides(color = guide_legend(override.aes = list(alpha=1)))
```

-   `keywidth` and `keyheight` (along with `default.unit`) allow you to specify the size of the keys with grid unit, e.g. `unit(1,'cm')`.

```{r}
#| layout-ncol: 2
#| fig-width: 3
#| fig-height: 3

base + guides(color = guide_legend(keyheight = unit(0.5,'cm'),keywidth=unit(1.5,'cm')))
base + guides(color = guide_legend(keyheight = unit(1.5,'cm'),keywidth=unit(0.5,'cm')))
```

## 11.4 Binned color scales

Color scales also can come in binned versions. Sometimes makes it easier to detect changes.

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3
#| 
erupt + scale_fill_binned()
erupt + scale_fill_steps()
erupt + scale_fill_steps(n.breaks = 8) # Control number of steps
```

`scale_fill_steps()` is analogous to `scale_fill_gradient()` so has similar functions shown earlier.

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3
#| 
erupt + scale_fill_steps(low = 'grey',high = 'brown')
erupt + scale_fill_steps2(low='grey',mid = 'white',high='brown',midpoint = 0.02)
erupt + scale_fill_stepsn(n.breaks=12,colors = terrain.colors(12))
```

With access to the viridis palettes and brewer palettes like before...

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3
#| 
erupt + scale_fill_stepsn(n.breaks = 9, colours = viridis::viridis(9))
erupt + scale_fill_stepsn(n.breaks = 9, colours = viridis::magma(9))
erupt + scale_fill_stepsn(n.breaks = 9, colours = viridis::inferno(9))

erupt + scale_fill_fermenter(n.breaks = 9)
erupt + scale_fill_fermenter(n.breaks = 9, palette = "Oranges")
erupt + scale_fill_fermenter(n.breaks = 9, palette = "PuOr")
```
### 11.4.1 Limits, breaks, and labels
Same logic as continuous scales. `limits` argument is a numeric vector specifying two end points, `breaks` is a numeric vector specifying the break points, and `labels` is a character vector specifying the labels. 

:::{.callout-note}

#### Is anything different?

The `breaks` argument defines the edges of the bins rather than simply specifying locations of tick marks.

### 11.4.2 Legends
Similar to before but the function is `guide_colorsteps()` within the `guides()` helper function. 
- `show.limits` indicates whether the values should be shown at the ends of the stepped color bar. 
```{r}
#| layout-ncol: 2
base <- ggplot(mpg, aes(cyl, displ, colour = hwy)) +
  geom_point(size = 2) +
  scale_color_binned()

base 
base + guides(colour = guide_coloursteps(show.limits = TRUE))
```
- `ticks` is a logical variable indicating whether tick marks should be displayed adjacent to the legend labels (default is `NULL`)
```{r}
#| fig-width: 3
#| fig-height: 3
base + guides(colour = guide_coloursteps(ticks = TRUE))
```
- `even.steps` is a logical variable indicating whether bins should be evenly spaced (default is `TRUE`) or proportional in size to their frequency in the data

## 11.5 Date-time color scales
```{r}
#| layout-ncol: 2
#| fig-width: 3
#| fig-height: 3

base <- ggplot(economics, aes(psavert, uempmed, colour = date)) + 
  geom_point() 

base
base + 
  scale_colour_date(
    date_breaks = "142 months", 
    date_labels = "%b %Y"
  )
```
## 11.6 Alpha scales
```{r}
ggplot(faithfuld, aes(waiting, eruptions, alpha = density)) +
  geom_raster(fill = "lightpink") +
  scale_x_continuous(expand = c(0, 0)) + 
  scale_y_continuous(expand = c(0, 0))
```
## Legend position
Use the `theme()` function. 
```{r}
#| layout-ncol: 4
#| fig-width: 3
#| fig-height: 3

base <- ggplot(toy, aes(up,up)) +
  geom_point(aes(color = txt),size=3) +
  xlab(NULL) +
  ylab(NULL)

base + theme(legend.position = 'left')
base + theme(legend.position = 'right') #default
base + theme(legend.position = 'bottom')
base + theme(legend.position = 'none')
```

There's other options to adjust the orientation of the legend too.
- `legend.direction` to adjust the layhout of items ('horizontal' or 'vertical')
- `legend.box` for the arrange of multiple legends ('horizontal' or 'vertical')
- `legend.box.just` for the justification of each legend within the overall bounding box ('top', 'bottom', 'left', or 'right')
If there's a lot of blank space in the plot then the legend may be placed inside the chart. `legend.position = c(x,y)` controls this and is based on a relative location, e.g. `c(0,1)` is top-left corner and `c(1,0)` is bottom-right corner. 
```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3

base <- ggplot(toy, aes(up, up)) + 
  geom_point(aes(colour = txt), size = 3)

base + 
  theme(
    legend.position = c(0, 1), 
    legend.justification = c(0, 1)
  )

base + 
  theme(
    legend.position = c(0.5, 0.5), 
    legend.justification = c(0.5, 0.5)
  )

base + 
  theme(
    legend.position = c(1, 0), 
    legend.justification = c(1, 0)
  )
```

